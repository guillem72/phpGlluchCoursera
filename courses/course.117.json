{"id":117,"shortName":"proglang","name":"Programming Languages","language":"en","shortDescription":"Investigate the basic concepts behind programming languages, with an emphasis on the techniques and benefits of functional programming. Use the programming languages ML, Racket, and Ruby to learn how the pieces of a language fit together to create more than the sum of the parts. Gain new software skills and the concepts needed to learn new languages on your own.","aboutTheCourse":"<p>Learn many of the concepts that underlie all programming languages. Use functional programming and contrast it with\nobject-oriented programming. Through experience writing programs and studying\nthree different languages, learn the key issues in designing and using\nprogramming languages, such as modularity and the complementary benefits\nof static and dynamic typing. This course is neither particularly theoretical\nnor just about programming specifics \u2013 it will give you a framework for\nunderstanding how to use language constructs effectively and how to design\ncorrect and elegant programs. By using different languages, you learn to\nthink more deeply than in terms of the particular syntax of one language.\nThe emphasis on functional programming is essential for learning how to\nwrite robust, reusable, composable, and elegant programs \u2013 in any language.\n<\/p>\n<p>\nBeginning with the Fall 2014 offering, verified certificates are available for this course.  The certificates look slightly different than for courses from other institutions.  <a href=\"https:\/\/drive.google.com\/file\/d\/0B5sUgbs6aDNpbE1DQXV2MVdUS1k\/view?usp=sharing\">Here is an example.<\/a>\n<\/p>","targetAudience":0,"courseSyllabus":"<p>Note: About half the students completing prior offerings report an estimated workload of 8-12\n    hours \/ week is accurate while most of the other half\n    spent more time -- 15 hours \/ week or more. Workload naturally differs for different people depending\n    on one's background. Do see the recommended-background section below.<\/p>\n<p>Topics (most of which may not mean anything to you until you take the\n    course):<\/p>\n<ul>\n    <li>Syntax vs. semantics vs. idioms vs. libraries vs. tools<\/li>\n    <li>ML basics (bindings, conditionals, records, functions)<\/li>\n    <li>Recursive functions and recursive types<\/li>\n    <li>Benefits of no mutation<\/li>\n    <li>Algebraic datatypes, pattern matching<\/li>\n    <li>Tail recursion<\/li>\n    <li>First-class functions and function closures<\/li>\n    <li>Lexical scope<\/li>\n    <li>Currying<\/li>\n    <li>Syntactic sugar<\/li>\n    <li>Equivalence and effects<\/li>\n    <li>Parametric polymorphism and container types<\/li>\n    <li>Type inference<\/li>\n    <li>Abstract types and modules<\/li>\n    <li>Racket basics<\/li>\n    <li>Dynamic vs. static typing<\/li>\n    <li>Laziness, streams, and memoization<\/li>\n    <li>Implementing languages, especially higher-order functions<\/li>\n    <li>Macros<\/li>\n    <li>Eval<\/li>\n    <li>Ruby basics<\/li>\n    <li>Object-oriented programming is dynamic dispatch<\/li>\n    <li>Pure object-orientation<\/li>\n    <li>Implementing dynamic dispatch<\/li>\n    <li>Multiple inheritance, interfaces, and mixins<\/li>\n    <li>OOP vs. functional decomposition and extensibility<\/li>\n    <li>Subtyping for records, functions, and objects<\/li>\n    <li>Subtyping<\/li>\n    <li>Class-based subtyping<\/li>\n    <li>Subtyping vs. parametric polymorphism; bounded polymorphism<\/li>\n<\/ul>","courseFormat":"Video segments have short question-and-answer sections, but the main work\nwill be seven homework assignments that involve writing small programs.\nThe programming assignments will be automatically graded <i>and<\/i> students\nwill peer-assess each other's submissions for style. Critiquing other\u2019s\nwork and receiving comments about your own are invaluable learning experiences.\nThe course also has a midterm exam and a final exam.","suggestedReadings":"Course videos and programming exercises serve as the bulk of class content.\nWritten notes by the instructor are also available and serve as a valuable\nresource.","instructor":"Dan  Grossman","estimatedClassWorkload":"8-16 hours\/week","recommendedBackground":"The course assumes students are familiar with programming covered by most\nintroductory courses -- this is <i>not<\/i> an introductory programming course.\u00a0 Conversely, it is also <i>not<\/i> a particularly advanced course -- a couple good prior programming courses should be enough.\u00a0 Students should be comfortable with variables, conditionals,\narrays, linked lists, stacks, and recursion (though recursion will be reviewed\nand expanded upon), and the difference between an interface and an implementation.\nStudents should be eager to write programs in languages new to them.\u00a0 Later parts\nof the course analyze basic object-oriented concepts and contrast them\nwith those of other languages, so familiarity with Java or a closely related\nlanguage (e.g., C#) is helpful, but not required for homework assignments.","links":{}}