{
    "id": 122,
    "shortName": "hwswinterface",
    "name": "The Hardware\/Software Interface",
    "language": "en",
    "shortDescription": "Examines key computational abstraction levels below modern high-level languages. From Java\/C to assembly programming, to basic processor and system organization.",
    "aboutTheCourse": "This course examines key computational abstraction levels below modern\nhigh-level languages; number representation, assembly language, introduction\nto C, memory management, the operating-system process model, high-level\nmachine architecture including the memory hierarchy, and how high-level\nlanguages are implemented. We will develop students’ sense of “what really\nhappens” when software runs — and that this question can be answered at\nseveral levels of abstraction, including the hardware architecture level,\nthe assembly level, the C programming level and the Java programming level.\nThe core around which the course is built is C, assembly, and low-level\ndata representation, but this is connected to higher levels (roughly how\nbasic Java could be implemented), lower levels (the general structure of\na processor and the memory hierarchy), and the role of the operating system\n(but not how the operating system is implemented).",
    "targetAudience": 0,
    "courseSyllabus": "This course should develop students’ sense of “what really happens” when\nsoftware runs — and convey that this question can be answered at several\nlevels of abstraction, including the hardware architecture level, the assembly\nlevel, the C programming level and the Java programming level. The core\naround which the course is built is C, assembly, and low-level data representation,\nbut this is connected to higher levels (roughly how basic Java could be\nimplemented), lower levels (the general structure of a processor), and\nthe role of the operating system (but not how the operating system is implemented).\nFor (computer science) students wanting to specialize at higher levels\nof abstraction, this could in the extreme be the only course they take\nthat considers the “C level” and below. However, most will take a subset\nof Systems Programming, Hardware Design and Implementation, Operating Systems,\nCompilers, etc. For students interested in hardware, embedded systems,\ncomputer engineering, computer architecture, etc., this course is the introductory\ncourse after which other courses will delve both deeper (into specific\ntopics) and lower (into hardware implementation, circuit design, etc.).\nThe course has three principal themes:\n<ul>\n    <li>Representation: how different data types (from simple integers to arrays\n        of data structures) are represented in memory, how instructions are encoded,\n        and how memory addresses (pointers) are generated and used to create complex\n        structures.<\/li>\n    <li>Translation: how high-level languages are translated into the basic instructions\n        embodied in process hardware with a particular focus on C and Java.<\/li>\n    <li>Control flow: how computers organize the order of their computations,\n        keep track of where they are in large programs, and provide the illusion\n        of multiple processes executing in parallel.<\/li>\n<\/ul>At the end of this course, students should:\n<ul>\n    <li>understand the multi-step process by which a high-level program becomes\n        a stream of instructions executed by a processor;<\/li>\n    <li>know what a pointer is and how to use it in manipulating complex data\n        structures;<\/li>\n    <li>be facile enough with assembly programming (X86) to write simple pieces\n        of code and understand how it maps to high-level languages (and vice-versa);<\/li>\n    <li>understand the basic organization and parameters of memory hierarchy and\n        its importance for system performance;<\/li>\n    <li>be able to explain the role of an operating system;<\/li>\n    <li>know how Java fundamentally differs from C;<\/li>\n    <li>grasp what parallelism is and why it is important at the system level;\n        and<\/li>\n    <li>be more effective programmers (more efficient at finding bugs, improved\n        intuition about system performance).<\/li>\n<\/ul>Topics:\n<br>\n<ul>\n    <li>Number representation<\/li>\n    <li>Assembly language<\/li>\n    <li>Basics of C<\/li>\n    <li>Memory management<\/li>\n    <li>Operating-system process model<\/li>\n    <li>High-level machine architecture<\/li>\n    <li>Memory hierarchy<\/li>\n    <li>Implementation of high-level languages<\/li>\n<\/ul>",
    "estimatedClassWorkload": "10-15 hours\/week",
    "recommendedBackground": "Introductory programming in C or Java as well as familiarity with binary numbers.<br>",
    "links": {

    }
}