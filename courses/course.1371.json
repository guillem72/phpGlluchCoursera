{
    "id": 1371,
    "shortName": "nand2tetris1",
    "name": "From Nand to Tetris \/ Part I",
    "language": "en",
    "shortDescription": "Build a modern computer system, starting from first principles.\n\nThe course consists of six weekly hands-on projects that take you from constructing elementary logic gates all the way to building a fully functioning general purpose computer. In the process, you will learn -- in the most direct and intimate way -- how computers work, and how they are designed.",
    "aboutTheCourse": "<strong>This course is a fascinating 7-week voyage of discovery<\/strong>&nbsp;in which you will go all the way from Boolean algebra and elementary logic gates to building a central processing unit, a memory system, and a hardware platform, leading up to a general-purpose computer that can run any program that you fancy. In the process of building this computer you will become familiar with many important hardware abstractions, and you will implement them, hands on. But most of all, you will enjoy the tremendous thrill of building a complex and useful system from the ground up.<br><strong><br>You will build all the&nbsp;hardware modules<\/strong>&nbsp;on your home&nbsp;computer, using a Hardware Description Language&nbsp;(HDL), learned in the course, and a&nbsp;hardware simulator, supplied by us. A hardware simulator is a software system that enables building and simulating gates and chips before actually committing them to silicon. This is exactly what hardware engineers do in practice: they build and test computers in simulation, using HDL and hardware simulators.",
    "targetAudience": 0,
    "courseSyllabus": "<div><strong>Week 0: <\/strong>course introduction and overview, the roles of abstraction and implementation in systems design, the road ahead.<strong><br><br>Week 1: <\/strong>Introduction to Boolean functions, gate logic, Hardware Description Language (HDL), and hardware simulation. Project: build a set of 15 elementary logic gates that will serve as the building blocks of subsequent chips.<br><br><\/div><strong>Week 2:<\/strong>&nbsp;Binary numbers, binary addition, the two's complement methods, combinational logic. Project: build a family of adder chips leading up to an Arithmetic Logic Unit (ALU).<br><br><strong>Week 3:<\/strong>&nbsp;Flip-flops, clocks, memory systems, sequential logic. Project: build a family of storage units from 1-bit registers to n-bit registers to&nbsp;Random Access Memories (RAM) of arbitrary sizes.<br><br><div><strong>Week 4:<\/strong> Machine language, binary and symbolic instructions, input and output handling, using an assembler. Project: write some low-level assembly programs and run them on a supplied CPU emulator.&nbsp;<br><br><\/div><strong>Week 5:<\/strong>&nbsp;Computer organization, the Von Neumann architecture, the fetch-execute cycle. Project: build the Hack CPU and computer system, using all the chips that were built in the previous projects.<br><br><strong>Week 6:<\/strong>&nbsp;Assembly languages, assemblers, parsing, symbol tables, code generation, the translation process. Project: build an assembler that translates Hack symbolic programs into Hack executable (binary) code.",
    "estimatedClassWorkload": "5-10 hours\/week",
    "recommendedBackground": "<strong>In order to take this course you have to know<\/strong>... well... absolutely nothing about computer science or engineering! All the knowledge necessary to build the computer and complete this course successfully is given in the course lectures and projects. The only pre-requisites are curiosity and passion&nbsp;to build a cool working example of the most important invention of the 20th century.",
    "links": {

    }
}