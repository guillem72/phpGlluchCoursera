{
    "id": 1775,
    "shortName": "webgl",
    "name": "Interactive Computer Graphics with WebGL",
    "language": "en",
    "shortDescription": "Applications of computer graphics are ubiquitous, ranging from animations in movies to computer aided design of mechanical parts. In this course, we will learn how to create three-dimensional  interactive applications using WebGL that run within the latest web browsers. We will disucss all aspects of computer graphics from hardware to software to applications.",
    "aboutTheCourse": "<p>OpenGL is the standard application programming interface\n(API) to graphics systems for\nboth education and industry. Recent advances in hardware and software have focussed application\ndevelopment on the Web and for mobile devices such as smart phones. Over the past year there\nhas been enormous interest in WebGL, the version of OpenGL that runs within Web browsers and even\non newer smart phones. Consequently, for the first time both students and practitioners can\ndevelop exciting three-dimensional interactive applications that are\nindependent of the particular\nplatform and can be accessed like any other Web application.<\/p>\n\n\n\n<p>In this course, we\nwill learn how to create three-dimensional, interactive applications using\nWebGL that run within the\nlatest web browsers. By the end of the course, every student will have written\nand tested a complete\ninteractive three-dimensional application. Because WebGL is the JavaScript implementation of\nOpenGL ES 2.0, all code will be developed in JavaScript. No prior knowledge of JavaScript is\nrequired as long as participants can program in C++, C# or Java. The content of the\ncourse will be based on the instructor's recent textbook (not required) and\ncourse which is the first\nuniversity course to use WebGL as the API.<\/p>",
    "targetAudience": 1,
    "courseSyllabus": "<strong>Week 1: Introduction and Background<\/strong><br>&nbsp;&nbsp;&nbsp; Lecture 1: Course Overview <br>&nbsp;&nbsp;&nbsp; Lecture 2: Outline via Examples<br>&nbsp;&nbsp;&nbsp; Lecture 3: Prerequisites and References<br>&nbsp;&nbsp;&nbsp; Lecture 4: A Simple WebGL Example<br>&nbsp;&nbsp;&nbsp; Lecture 5: Getting Started with WebGL<br>&nbsp;&nbsp;&nbsp; Lecture 6: OpenGL and WebGL<br>&nbsp;&nbsp;&nbsp; Lecture 7: HTML and Browsers<br>&nbsp;&nbsp;&nbsp; Lecture 8: JavaScript<br><strong>Week 2: WebGL<\/strong><br>&nbsp;&nbsp;&nbsp; Lecture 1: Square Program<br>&nbsp;&nbsp;&nbsp; Lecture 2: Shader Execution Model<br>&nbsp;&nbsp;&nbsp; Lecture 3: Square Program: The HTML file<br>&nbsp;&nbsp;&nbsp; Lecture 4: Square Program: The JavaScript File<br>&nbsp;&nbsp;&nbsp; Lecture 5: WebGL Primitves and Viewing<br>&nbsp;&nbsp;&nbsp; Lecture 6: Tessellation and Twist<br>&nbsp;&nbsp;&nbsp; Lecture 7: The Sierpinski Gasket<br>&nbsp;&nbsp;&nbsp; Lecture 8: Moving to Three Dimensions<br><strong>Week 3: The Open GL Shading Language and Interaction<\/strong><br>&nbsp;&nbsp;&nbsp; Lecture 1: Color<br>&nbsp;&nbsp;&nbsp; Lecture 2: GLSL and Shaders<br>&nbsp;&nbsp;&nbsp; Lecture 3: Input and Interaction<br>&nbsp;&nbsp;&nbsp; Lecture 4: Animation<br>&nbsp;&nbsp;&nbsp; Lecture 5: Buttons and Menus<br>&nbsp;&nbsp;&nbsp; Lecture 6: Keyboard and Sliders<br><strong>Week 4: Displaying Geometry in WebGL<\/strong><br>&nbsp;&nbsp;&nbsp; Lecture 1: Position Input<br>&nbsp;&nbsp;&nbsp; Lecture 2: Picking<br>&nbsp;&nbsp;&nbsp; Lecture 3: Matrices<br>&nbsp;&nbsp;&nbsp; Lecture 4: Representation<br>&nbsp;&nbsp;&nbsp; Lecture 5: Geometry 1<br>&nbsp;&nbsp;&nbsp; Lecture 6: Geometry 2<br>&nbsp;&nbsp;&nbsp; Lecture 7: Homogeneous Coordinates<br>&nbsp;&nbsp;&nbsp; Lecture 8: Some Caveats<br><strong>Week 5: Transformations <\/strong><br>&nbsp;&nbsp;&nbsp; Lecture 1: Affine Transformations<br>&nbsp;&nbsp;&nbsp; Lecture 2: Rotation, Translation, Scaling<br>&nbsp;&nbsp;&nbsp; Lecture3: Concatenating Transformation<br>&nbsp;&nbsp;&nbsp; Lecture 4: Transformations in WebGL<br>&nbsp;&nbsp;&nbsp; Lecture 5: Representing a Cube<br>&nbsp;&nbsp;&nbsp; Lecture 6: Animating the Cube<br><strong>Week 6: Viewing in WebGL<\/strong><br>&nbsp;&nbsp;&nbsp; Lecture 1: Classical Viewing<br>&nbsp;&nbsp;&nbsp; Lecture 2: Positioning the Camera<br>&nbsp;&nbsp;&nbsp; Lecture 3: Projection<br>&nbsp;&nbsp;&nbsp; Lecture 4: Projection in WebGL<br>&nbsp;&nbsp;&nbsp; Lecture 5: Orthogonal Projection Matrices<br>&nbsp;&nbsp;&nbsp; Lecture 6: Perspective Projection Matrices<br>&nbsp;&nbsp;&nbsp; Lecture 7: Representing and Displaying Meshes<br>&nbsp;&nbsp;&nbsp; Lecture 8: Lighting and Shading<br>&nbsp;&nbsp;&nbsp; Lecture 9: The Phone Lighting Model<br><strong>Week 7: Lighting,&nbsp; Shading and Texture Mapping<\/strong><br>&nbsp;&nbsp;&nbsp; Lecture 1: Lighting and Shading in WebGL<br>&nbsp;&nbsp;&nbsp; Lecture 2: Polygon Shading<br>&nbsp;&nbsp;&nbsp; Lecture 3: Per Vertex vs per Fragment Shading<br>&nbsp;&nbsp;&nbsp; Lecture 4: Buffers in WebGL<br>&nbsp;&nbsp;&nbsp; Lecture 5: Texture Mapping Overview<br>&nbsp;&nbsp;&nbsp; Lecture 6: Approaches to Texture Mapping<br>&nbsp;&nbsp;&nbsp; Lecture 7: WebGL Texture Mapping<br><strong>Week 8: WebGL Texture Mapping<\/strong><br>&nbsp;&nbsp;&nbsp; Lecture 1: WebGL Texture Objects<br>&nbsp;&nbsp;&nbsp; Lecture 2: Texture Mapping to the Cube<br>&nbsp;&nbsp;&nbsp; Lecture 3: Texture Mapping Variations<br>&nbsp;&nbsp;&nbsp; Lecture 4: Reflection and Environment Maps<br>&nbsp;&nbsp;&nbsp; Lecture 5: Bump Maps<br>&nbsp;&nbsp;&nbsp; Lecture 6: Compositing and Blending<br>&nbsp;&nbsp;&nbsp; Lecture 7: Imaging Applications<br><strong>Week 9: Using the GPU<\/strong><br>&nbsp;&nbsp;&nbsp; Lecture 1: The Mandelbrot Set<br>&nbsp;&nbsp;&nbsp; Lecture 2: Generating the Mandelbrot Set in the CPU<br>&nbsp;&nbsp;&nbsp; Lecture 3: Generating the Mandelbrot Set in the GPU<br>&nbsp;&nbsp;&nbsp; Lecture 4: Framebuffer Objects<br>&nbsp;&nbsp;&nbsp; Lecture 5: Renderbuffers<br>&nbsp;&nbsp;&nbsp; Lecture 6: Render to Texture<br><strong>Week: 10: Render-to-Texture Applications<\/strong><br>&nbsp;&nbsp;&nbsp; Lecture 1: Picking by Color<br>&nbsp;&nbsp;&nbsp; Lecture 2: Buffer Pingponging<br>&nbsp;&nbsp;&nbsp; Lecture 3: Diffusion Example<br>&nbsp;&nbsp;&nbsp; Lecture 4: Agent-Based Models<br><br>",
    "estimatedClassWorkload": "6-8 hours\/week",
    "recommendedBackground": "Participants should be proficient in a high-level programming language sich as Java, C++ or JavaScript. Although all examples and assignments will be done in JavaScript, participants should be able to pick up sufficient JavaScript knowledge through the lectures, examples and online resources.",
    "links": {}
}