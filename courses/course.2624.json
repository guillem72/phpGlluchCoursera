{"id":2624,"shortName":"posacommunication","name":"Programming Mobile Services for Android Handheld Systems: Communication","language":"en","shortDescription":"In this course, we will learn how to apply patterns and frameworks to alleviate the complexity of developing concurrent and networked applications and services on mobile devices running Android that connect to popular cloud computing platforms. ","aboutTheCourse":"<span><p dir=\"ltr\">This MOOC describes by example how to apply patterns and frameworks to alleviate the complexity of developing concurrent software for mobile devices via the use of object-oriented design techniques. A <a href=\"http:\/\/en.wikipedia.org\/wiki\/Software_design_pattern\">pattern<\/a> describes a reusable solution to a common problem that arises within a particular context. A <a href=\"http:\/\/en.wikipedia.org\/wiki\/Software_framework\">framework<\/a> is an integrated set of components that collaborate to provide a reusable architecture for a family of related apps or services. &nbsp;Frameworks can also be viewed as concrete realizations of patterns that facilitate direct reuse of detailed design and source code.<\/p><p dir=\"ltr\">This MOOC will cover fundamental techniques, patterns, and frameworks related to communicating with local and remote services. In particular, this MOOC course will cover Android mechanisms for interacting with local&nbsp;bound and started services via&nbsp;Intents, Messengers, and the&nbsp;Android Interface Definition Language (AIDL).&nbsp; It will also focus on interacting with&nbsp;remote web services using HTTP and data marshalling with JSON. Remote interaction models, ranging from request on demand, polling, push, and sockets will be discussed. Students that complete this MOOC will have a solid understanding of how to build Android applications and local services that can interact with remote services, handle data marshaling, and perform error handling. Hands-on programming projects will require students to develop Android applications that interact with REST-based services.<\/p><p dir=\"ltr\"><strong>The Mobile Cloud Computing with Android (MoCCA) Specialization<\/strong><\/p><p dir=\"ltr\">This is the fourth course of the six-course <a href=\"https:\/\/www.coursera.org\/specialization\/mobilecloudcomputing\/2\">Mobile Cloud Computing with Android (MoCCA) Specialization<\/a>. It has been designed as part of a Coursera Specialization designed to help learners create complex, cloud-based Android Applications, and includes a final \u201ccapstone\u201d project for those who earn Verified Certificates across all six courses.<\/p><p dir=\"ltr\">Note: We are proud to announce that the MoCCA specialization has already reached hundreds of thousands of learners around the globe. In its last iteration, we worked with Google to provide Nexus tablets, feedback from the Google App team, and the potential to be featured in the Google Play store to top course completers.<\/p><p dir=\"ltr\">This time around, we are providing more flexibility for all of you busy learners. We are running the Programming Mobile Applications courses in more digestible one-month-long sections, each with a meaningful mini-project at the end. Additionally, we will be re-offering the courses more frequently. For example, new sessions of my two introductory courses will be launched on a monthly basis, so that you can find a convenient time to join us or pick up where you left off if you didn\u2019t quite finish before.<\/p><p dir=\"ltr\">For previous MoCCA students: If you have already earned a Verified Certificate in the previous version of this course, \"Pattern-Oriented Software Architectures: Programming Mobile Services for Android Handheld Systems\u201d offered in May 2014, you do not need to retake this course to continue towards the Specialization certificate and final project in 2015. Please consult the <a href=\"https:\/\/courserahelp.zendesk.com\/hc\/en-us\/articles\/201223289-Specializations\">Specializations Help Center<\/a> or contact the <a href=\"https:\/\/courserahelp.zendesk.com\/hc\/en-us\/requests\/new?ticket_form_id=19009\">Coursera support team<\/a> if you are not sure whether you qualify.<\/p><p dir=\"ltr\">This MOOC and five others, taught by Dr. Adam Porter from the University of Maryland and Dr. Jules White from Vanderbilt University, have been designed to complement each other as part of the first trans-institution sequence of MOOCs taught on the Coursera platform, structured as follows:<\/p><ul><li><p dir=\"ltr\">The first two courses by Dr. Adam Porter, of the University of Maryland, are <a href=\"https:\/\/www.coursera.org\/course\/androidpart1\">Programming Mobile Applications for Android Handheld Systems Part 1<\/a> and <a href=\"https:\/\/www.coursera.org\/course\/androidpart2\">Part 2<\/a>. They focus on the design and programming of user-facing applications. &nbsp;<\/p><\/li><li><p dir=\"ltr\">The third and fourth courses by Dr. Douglas Schmidt, of Vanderbilt University, are <a href=\"https:\/\/www.coursera.org\/course\/posaconcurrency\">Programming Mobile Services for Android Handheld Systems: Concurrency<\/a> and <a href=\"https:\/\/www.coursera.org\/course\/posacommunication\">Communication<\/a>. They focus on middleware systems programming topics, such as synchronous and asynchronous concurrency models, background service processing, structured data management, local inter-process communication and networking, and integration with cloud-based services. &nbsp;<\/p><\/li><li><p dir=\"ltr\">The fifth and sixth courses by Dr. Jules White, of Vanderbilt University, are <a href=\"https:\/\/www.coursera.org\/course\/mobilecloudprogram\">Programming Cloud Services for Android Handheld Systems: Spring<\/a> and <a href=\"https:\/\/www.coursera.org\/course\/mobilecloudsecurity\">Security<\/a>. &nbsp;They focus on how to connect Android mobile devices to cloud computing and data storage resources, essentially turning a device into an extension of powerful cloud-based services on popular cloud computing platforms, such as Google App Engine and Amazon EC2. <\/p><\/li><li><p dir=\"ltr\">The final \u201ccapstone\u201d project will require students to develop a complex mobile cloud computing application from the ground up.<\/p><\/li><\/ul><p dir=\"ltr\">Some of the programming assignments for these MOOCs will be coordinated. &nbsp;<\/p>If you just want to take some of the MOOCs in this sequence or take them all in different order you\u2019re certainly welcome to do so, and you\u2019ll still learn a lot. However, if you take all the MOOCs in this sequence in the order presented you\u2019ll gain a deeper, end-to-end understanding of handheld systems, their applications and services, as well as their integration into the cloud.<\/span>","targetAudience":1,"courseSyllabus":"The course is organized into the following sections:<p><\/p><ul><li><strong>Section 0: Course Introduction<\/strong><ul><li>Part 1:Course Structure and Topics<br><\/li><li>Part 2: Course Prerequisites and Learning Strategies<\/li><\/ul><\/li><li><strong>Section 1: Android Services and Local IPC<\/strong><br><\/li><ul><li>Part 1: Overview of Started and Bound Services<br><\/li><li>Part 2: Activity and Service Communication<\/li><li>Part 3: Service to Activity Communication Using Android Messenger<\/li><li>Part 4: Programming Started Services<\/li><li>Part 5: Android IntentService<\/li><li>Part 6: Programming Bound Services with Messengers<br><\/li><li>Part 7: Overview of the Android Interface Definition Language (AIDL)<\/li><li>Part 8: Programming Bound Services with AIDL<\/li><\/ul><li><strong>Section 3: Android Remote IPC<\/strong><br><\/li><ul><li>Part 1: Overview of Hyper-Text Transfer Protocol (HTTP)<br><\/li><li>Part 2: Designing Mobile Applications with HTTP Communication<\/li><li>Part 3:&nbsp;Better Client-side Communication Abstractions for HTTP<\/li><ul><\/ul><\/ul><li><strong>Section 4: &nbsp;Communication Patterns in Android<\/strong><ul><li>Part 1: Activating Services on Demand with the Activator Pattern<\/li><li>Part 2: Passing Commands to Services with the Command Processor Pattern<\/li><li>Part 3: Automating Marshaling and Demarshaling of Data with the Proxy Pattern<\/li><li>Part 4: Supporting Object-Oriented Remote Method Calls with the Broker Pattern<\/li><ul><\/ul><\/ul><\/li><\/ul><p>Throughout the MOOC we'll focus on pattern-oriented software architecture, with an emphasis on concurrent and networked programming in the context of Android middleware systems programming mechanisms, such as synchronous and asynchronous concurrency models, background service processing, and local\/remote inter-process communication (IPC) and networking. We illustrate&nbsp;<i>by example<\/i>&nbsp;how key pattern and framework concepts and relationships are applied in Android Services and various local and remote IPC mechanisms from both an application and infrastructure perspective. Many code examples are shown throughout using Java, with a case study project used to reify the key points throughout all the modules in this section.<\/p><p>The PDF and PowerPoint versions of all the slides used in the course will be available online as the videos become available on the course website.<\/p>","courseFormat":"<div><span><p dir=\"ltr\">This course consists of both live and recorded lectures, with integrated quiz questions designed to ensure students understand the material covered in the lectures. &nbsp;There will also be the following graded material:<\/p><ul><li><p dir=\"ltr\">Weekly quizzes. Each quiz will contain a number of equally-weighted questions. There will be four weekly quizzes.<\/p><\/li><li><p dir=\"ltr\">Programming assignments. You will have N programming assignments (where N == 4) by the end of the course. You will have roughly 14 days to submit your solution. Each assignment will account for 1\/Nth of the total programming assignment points, so it's possible to miss an assignment and still pass the class as long as you do well on the other assignments. &nbsp;<\/p><\/li><\/ul><p dir=\"ltr\"><strong>Signature Track<\/strong><\/p>Coursera offers the <a href=\"https:\/\/www.coursera.org\/signature\/\">Signature Track<\/a> to verify the identity of students. Students in the Signature Track can receive a Verified Certificate, which involves earning a final grade greater than or equal to 70% on the quizzes, as well as completing the programming assignments with a score equal to 70% or higher. &nbsp;It's &nbsp;mandatory for students in the Signature Track to successfully achieve a Verified Certificate to be eligible to take the Capstone project at the end of the MoCCA Specialization.<\/span><br><\/div>","suggestedReadings":"<span><p dir=\"ltr\">Although the lectures are designed to be largely self-contained, it's recommended (but not required) that students refer to the following books: <\/p><ul><li><p dir=\"ltr\">Mark Murphy, <a href=\"http:\/\/commonsware.com\/Android\/\">The Busy Coder's Guide to Android Development<\/a>, CommonsWare.<\/p><\/li><li><p dir=\"ltr\">Goetz et al., <a href=\"http:\/\/www.amazon.com\/Java-Concurrency-Practice-Brian-Goetz\/dp\/0321349601\">Java Concurrency in Practice<\/a>, Addison-Wesley, 2006.<\/p><\/li><li><p dir=\"ltr\">Doug Lea, <a href=\"http:\/\/www.amazon.com\/Concurrent-Programming-Java-Principles-Pattern\/dp\/0201310090\">Concurrent Programming in Java<\/a>, Prentice Hall, 1999.<\/p><\/li><li><p dir=\"ltr\">Gamma et at., <a href=\"http:\/\/chggtrx.com\/click.track?CID=267582&amp;AFID=301076&amp;ADID=1088031&amp;SID=posa&amp;isbn_ean=9780201633610\">Design Patterns: Elements of Reusable Object-Oriented Software<\/a>, Addison-Wesley, Reading, MA, 1995.<\/p><\/li><li><p dir=\"ltr\">Buschmann et al., <a href=\"http:\/\/www.amazon.com\/Pattern-Oriented-Software-Architecture-Volume-Patterns\/dp\/0471958697\">Pattern-Oriented Software Architecture, Vol 1: A System of Patterns<\/a>, Wiley and Sons, 1996.<\/p><\/li><li><p dir=\"ltr\">Schmidt et al., <a href=\"http:\/\/chggtrx.com\/click.track?CID=267582&amp;AFID=301076&amp;ADID=1088031&amp;SID=posa&amp;isbn_ean=9780471606956\">Pattern-Oriented Software Architecture, Vol 2: Patterns for Concurrent and Networked Objects<\/a>, Wiley and Sons, 2000.<\/p><\/li><li><p dir=\"ltr\">Buschmann et al., <a href=\"http:\/\/www.amazon.com\/Pattern-Oriented-Software-Architecture-Volume-Distributed\/dp\/0470059028\/ref=pd_sim_b_1\">Pattern-Oriented Software Architecture:, Vol 4: A Pattern Language for Distributed Computing<\/a>, Wiley and Sons, 2007.<\/p><\/li><li><p dir=\"ltr\">Buschmann et al., <a href=\"http:\/\/www.amazon.com\/Pattern-Oriented-Software-Architecture-Languages\/dp\/0471486485\">Pattern-Oriented Software Architecture, Vol 5 On Patterns and Pattern Langauges<\/a>, Wiley and Sons, 2007.<\/p><\/li><\/ul>Much of this material is available <a href=\"http:\/\/www.dre.vanderbilt.edu\/~schmidt\/tutorials.html\">online<\/a>.<\/span><br>","estimatedClassWorkload":"8-12 hours\/week","recommendedBackground":"Ideally, students who take this course will have already taken Professor Porter\u2019s MOOCs on \u201cProgramming Mobile Applications with Android Handheld Systems\u201d, as well as Part 1 of \u201cProgramming Mobile Services for Android Handheld Systems.\u201d Students should also be familiar with general object-oriented design and programming concepts (such as encapsulation, abstraction, polymorphism, extensibility, and the Unified Modeling Language (UML) ), fundamental object-oriented programming language features (such as classes, inheritance, dynamic binding, and generics available in Java, basic systems programming concepts (such as event handling, processes\/threads, synchronization, interprocess communication, and dynamic linking), and networking terminology (such as client\/server and peer-to-peer architectures, TCP\/IP, and layering). &nbsp;We will review object-oriented design, systems programming, and networking concepts and techniques, so students who understand how to read\/write Java code examples should be fine.<br>","links":{}}