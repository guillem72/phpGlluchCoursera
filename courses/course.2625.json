{"id":2625,"shortName":"mobilecloudprogram","name":"Programming Cloud Services for Android Handheld Systems: Spring","language":"en","shortDescription":"In this course we will learn how to connect Android mobile devices to cloud computing and data storage resources, essentially turning a device into an extension of powerful cloud-based services on popular cloud computing platforms, such as Google App Engine and Amazon EC2. ","aboutTheCourse":"<p dir=\"ltr\">This MOOC describes by example how to connect Android mobile devices to clouds via the use of object-oriented design techniques, Java programming language features,&nbsp;<a href=\"http:\/\/www.eclipse.org\/jetty\/\">Jetty<\/a>&nbsp;middleware,&nbsp;<a href=\"http:\/\/www.oracle.com\/technetwork\/java\/index-jsp-135475.html\">Java Servlets<\/a>, the&nbsp;<a href=\"http:\/\/projects.spring.io\/spring-framework\/\">Java Spring Framework<\/a>, and&nbsp;<a href=\"http:\/\/en.wikipedia.org\/wiki\/Cloud_computing\" title=\"Link: http:\/\/en.wikipedia.org\/wiki\/Cloud_computing\">cloud computing platforms<\/a>, such as&nbsp;<a href=\"https:\/\/developers.google.com\/appengine\/\">Google App Engine<\/a>. Although there will be 10 weeks of lecture material, the required core of the course is six weeks long and can be completed flexibly within the ten week schedule to provide flexibility for students during the summer.<\/p><p dir=\"ltr\">An extended case study project will be used throughout the required core of the MOOC to showcase architectures for communicating with the cloud using HTTP, server-side processing of mobile data using servlets and the Java Spring Framework, and scalable storage of data using no-SQL databases and other platforms. Due to the importance of building secure and scalable mobile\/cloud platforms, this MOOC will not only show you how to program handheld systems that talk to the cloud, but how to do so securely, scalably, and efficiently. Security and scalability topics will be woven into discussions of cloud service creation so that students learn, from the start, how to create robust cloud services for mobile devices.<\/p><p dir=\"ltr\">Four weeks of optional lecture material will also be provided for students who would like to gain a deeper understanding of the patterns and frameworks for building cloud infrastructure building. This material will be presented in the context of the open-source&nbsp;<a href=\"http:\/\/www.dre.vanderbilt.edu\/JAWS\/\">JAWS<\/a>&nbsp;web server, which is implemented in C++ as part of the&nbsp;<a href=\"http:\/\/www.dre.vanderbilt.edu\/ACE\/\">ACE<\/a>&nbsp;open-source object-oriented concurrent and networked programming toolkit.<\/p><p dir=\"ltr\">Although the cloud service topics in this course will be taught in the context of connecting mobile devices to the cloud, the concepts are broader and will give students the ability to create the cloud services to support large-scale web applications, such as social networking applications; cloud services for embedded systems, such as the Internet of Things and Industrial Internet; and wearable computing devices, such as Google Glass.<\/p><p dir=\"ltr\"><strong>The Mobile Cloud Computing with Android (MoCCA) Specialization<\/strong><\/p><p dir=\"ltr\">This is the <strong>5th course<\/strong>&nbsp;of the six-course&nbsp;<a href=\"https:\/\/www.coursera.org\/specialization\/mobilecloudcomputing\/2\">Mobile Cloud Computing with Android (MoCCA) Specialization<\/a>. It has been designed as part of a Coursera Specialization designed to help learners create complex, cloud-based Android Applications, and includes a final \u201ccapstone\u201d project for those who earn Verified Certificates across all six courses.<\/p><p dir=\"ltr\"><strong>Note:&nbsp;<\/strong>We are proud to announce that the MoCCA specialization has already reached hundreds of thousands of learners around the globe. In its last iteration, we worked with Google to provide Nexus tablets, feedback from the Google App team, and the potential to be featured in the Google Play store to top course completers.<\/p><p dir=\"ltr\">This time around, we are providing more flexibility for all of you busy learners. We are running the Programming Mobile Applications courses in more digestible one-month-long sections, each with a meaningful mini-project at the end. Additionally, we will be re-offering the courses more frequently. For example, new sessions of my two introductory courses will be launched on a monthly basis, so that you can find a convenient time to join us or pick up where you left off if you didn\u2019t quite finish before.<\/p><p dir=\"ltr\"><strong>For previous MoCCA students:<\/strong>&nbsp;If you have already earned a Verified Certificate in the previous version of this course, \"Pattern-Oriented Software Architectures: Programming Mobile Services for Android Handheld Systems\u201d offered in May 2014, you do not need to retake this course to continue towards the Specialization certificate and final project in 2015. Please consult the&nbsp;<a href=\"https:\/\/courserahelp.zendesk.com\/hc\/en-us\/articles\/201223289-Specializations\">Specializations Help Center<\/a>&nbsp;or contact the&nbsp;<a href=\"https:\/\/courserahelp.zendesk.com\/hc\/en-us\/requests\/new?ticket_form_id=19009\">Coursera support team<\/a>&nbsp;if you are not sure whether you qualify.<\/p><p dir=\"ltr\">This MOOC and five others, taught by Dr. Adam Porter from the University of Maryland and Dr. Jules White from Vanderbilt University, have been designed to complement each other as part of the first trans-institution sequence of MOOCs taught on the Coursera platform, structured as follows:<\/p><ul><li><p dir=\"ltr\">The first two courses by Dr. Adam Porter, of the University of Maryland, are&nbsp;<a href=\"https:\/\/www.coursera.org\/course\/androidpart1\">Programming Mobile Applications for Android Handheld Systems Part 1<\/a>&nbsp;and&nbsp;<a href=\"https:\/\/www.coursera.org\/course\/androidpart2\">Part 2<\/a>. They focus on the design and programming of user-facing applications. &nbsp;<\/p><\/li><li><p dir=\"ltr\">The third and fourth courses by Dr. Douglas Schmidt, of Vanderbilt University, are&nbsp;<a href=\"https:\/\/www.coursera.org\/course\/posaconcurrency\">Programming Mobile Services for Android Handheld Systems: Concurrency<\/a>&nbsp;and&nbsp;<a href=\"https:\/\/www.coursera.org\/course\/posacommunication\">Communication<\/a>. They focus on middleware systems programming topics, such as synchronous and asynchronous concurrency models, background service processing, structured data management, local inter-process communication and networking, and integration with cloud-based services. &nbsp;<\/p><\/li><li><p dir=\"ltr\">The fifth and sixth courses by Dr. Jules White, of Vanderbilt University, are&nbsp;<a href=\"https:\/\/www.coursera.org\/course\/mobilecloudprogram\">Programming Cloud Services for Android Handheld Systems: Spring<\/a>&nbsp;and&nbsp;<a href=\"https:\/\/www.coursera.org\/course\/mobilecloudsecurity\">Security<\/a>. &nbsp;They focus on how to connect Android mobile devices to cloud computing and data storage resources, essentially turning a device into an extension of powerful cloud-based services on popular cloud computing platforms, such as Google App Engine and Amazon EC2.<\/p><\/li><li><p dir=\"ltr\">The final \u201ccapstone\u201d project will require students to develop a complex mobile cloud computing application from the ground up.<\/p><\/li><\/ul><p dir=\"ltr\">Some of the programming assignments and the iRemember integrative project for these MOOCs will be coordinated. &nbsp;<\/p>If you just want to take some of the MOOCs in this sequence or take them all in different order you\u2019re certainly welcome to do so, and you\u2019ll still learn a lot. However, if you take all the MOOCs in this sequence in the order presented you\u2019ll gain a deeper, end-to-end understanding of handheld systems, their applications and services, as well as their integration into the cloud.","targetAudience":1,"courseSyllabus":"<p>This MOOC describes by example how to connect Android mobile devices to clouds via the use of object-oriented design techniques; Java programming language features; Android Content Providers, Content Resolvers, and SQLite databases;&nbsp;<a href=\"http:\/\/www.eclipse.org\/jetty\/\">Jetty<\/a>&nbsp;middleware;&nbsp;<a href=\"http:\/\/www.oracle.com\/technetwork\/java\/index-jsp-135475.html\">Java Servlets<\/a>, the&nbsp;<a href=\"http:\/\/projects.spring.io\/spring-framework\/\">Java Spring Framework<\/a>;&nbsp;and&nbsp;<a href=\"http:\/\/en.wikipedia.org\/wiki\/Cloud_computing\">cloud computing platforms<\/a>, such as&nbsp;<a href=\"https:\/\/developers.google.com\/appengine\/\">Google App Engine<\/a>.&nbsp;<\/p><p>An extended case study project will be used throughout the required core of the MOOC to showcase architectures for communicating with the cloud using HTTP, server-side processing of mobile data using servlets and the Java Spring Framework, and scalable storage of data using no-SQL databases and other platforms. Due to the importance of building secure and scalable mobile\/cloud platforms, this MOOC will not only show you how to program handheld systems that talk to the cloud, but how to do so securely, scalably, and efficiently. Security and scalability topics will be woven into discussions of cloud service creation so that students learn, from the start, how to create robust cloud services for mobile devices.<\/p><p>Optional lecture material will also be provided for students who would like to gain a deeper understanding of the patterns and frameworks for building cloud infrastructure building. This material will be presented in the context of the open-source&nbsp;<a href=\"http:\/\/www.dre.vanderbilt.edu\/JAWS\/\" target=\"_blank\">JAWS&nbsp;<\/a>web server, which is implemented in C++ as part of the&nbsp;<a href=\"http:\/\/www.dre.vanderbilt.edu\/ACE\/\" target=\"_blank\">ACE&nbsp;<\/a>open-source object-oriented concurrent and networked programming toolkit.<\/p><p>Although the cloud service topics in this course will be taught in the context of connecting mobile devices to the cloud, the concepts are broader and will give students the ability to create the cloud services to support large-scale web applications, such as social networking applications; cloud services for embedded systems, such as the Internet of Things and Industrial Internet; and wearable computing devices, such as Google Glass.&nbsp;<\/p><p>The course is organized into the sections outlined below.<\/p><p><strong>Section 0: Overview of HTTP [Optional for students who took the POSA Communication MOOC]<\/strong><\/p><ul><li>Module 1: Overview of Hyper-Text Transfer Protocol (HTTP)<\/li><ul><li>What are Communication Protocols?<\/li><li>Intro to HTTP<\/li><li>Why HTTP?<\/li><li>What is a Cloud Service<\/li><li>HTTP Request Methods<\/li><li>HTTP Request Anatomy<\/li><li>URLs Query Parameters<\/li><li>Completed HTTP Response Anatomy<\/li><li>Completed HTTP Response Codes<\/li><li>Completed HTTP Cookies<\/li><\/ul><li>Module 2: Designing Mobile Applications with HTTP Communication<\/li><ul><li>Building Cloud Services on HTTP&nbsp;<\/li><li>Overview of REST<\/li><li>Push Messaging<\/li><li>Intro to Java Annotations<\/li><li>Completed HTTP to Object Marshalling<\/li><li>Completed Intro to JSON<\/li><\/ul><li>Module 3: Better Client-side Communication Abstractions for HTTP<\/li><ul><li>Introduction to Retrofit<\/li><li>Retrofit Client Code Walkthrough<\/li><\/ul><\/ul><p><strong>Section 1: Structured Data Storage on Android<\/strong><\/p><ul><strong><\/strong><li>Part 1: &nbsp;Overview of Android Content Providers and Content Resolvers<\/li><li>Part 2:&nbsp;Programming with Android Content Resolvers<\/li><li>Part 3: Programming Android Content Providers<\/li><li>Part 4:&nbsp;Overview of SQLite&nbsp;<\/li><li>Part 5: Asynchronous Access to Content Providers&nbsp;<\/li><\/ul><p><b>Section 2: Building Java Cloud Services<\/b><\/p><ul><li>Module 1: Java Servlets<ul><li>What are Servlets?<\/li><li>A First Cloud Service with a Servlet<\/li><li>Web.xml<\/li><li>Video Servlet Code Walkthrough<\/li><li>Video Servlet Test Walkthrough with HttpClient<\/li><li>Securely Handling Client Data Avoiding Injection Attacks<\/li><\/ul><\/li><li>Module 2: Better Abstractions for Building Java Cloud Services<ul><li>Intro to Java Annotations<\/li><li>HTTP to Object Marshalling<\/li><li>Intro to JSON<\/li><li>The Spring Dispatcher Servlet and the Controller Abstraction<\/li><li>Intro to Spring Controllers<\/li><li>Accepting Client Data with RequestParam Annotations<\/li><li>Accepting Client Data with PathVar Annotations<\/li><li>Accepting Client Data with RequestBody Annotations and JSON<\/li><li>Handling Multipart Data<\/li><li>Generating Responses with the ResponseBody Annotation<\/li><li>Custom Marshalling with Jackson Annotations Serializers\/Deserializers<\/li><li>Spring Boot Application Structure<\/li><li>Spring Controller Code Walkthrough<\/li><li>Spring Controller Test Code Walkthrough<\/li><\/ul><\/li><li>Module 3: Better Client-side Communication Abstractions<ul><li>Introduction to Retrofit<\/li><li>Retrofit Client Code Walkthrough<\/li><li>Android Retrofit Client Code Walkthrough<\/li><\/ul><\/li><li>Module 4: Building Loosely Coupled and Extensible Java Services<ul><li>Spring Dependency Injection Auto-wiring<\/li><li>Spring Configuration Annotations<\/li><li>Spring Dependency Injection Controller Code Walkthrough<\/li><li>Spring Dependency Injection Controller Test Code Walkthrough<\/li><\/ul><\/li><\/ul><p><b>Section 3: Building Database-driven Java Cloud Services<\/b><\/p><ul><li>Module 1: Persistent Objects<ul><li>Object to DB Mapping<\/li><li>JPA<\/li><li>Entities<\/li><li>Repositories<\/li><li>Understanding SQL Injection Attacks<\/li><li>Spring Data Code Walkthrough<\/li><\/ul><\/li><li>Module 2: RESTful Services for Persistent Objects<ul><li>Spring Data REST<\/li><li>Spring Data REST Code Walkthrough<\/li><\/ul><\/li><\/ul><p><b>Section 4: Deploying to the Cloud Scaling<\/b><\/p><ul><li>Module 1: General Scaling Strategies<ul><li>Stateless vs. Stateful Applications<\/li><li>Horizontal Scaling<\/li><li>Auto-scaling Horizontally<\/li><li>Caching<\/li><li>Offloading to Cloud Provider Services<\/li><li>Asynchronous IO in Controllers<\/li><\/ul><\/li><li>Module 2: Scaling Up Data Storage<ul><li>NoSQL Databases<\/li><li>Optimizing for Key-based Lookups<\/li><li>Optimizing for Reads vs. Writes<\/li><li>Contention Sharding<\/li><li>Mongo DB<\/li><li>Spring Data Mongo DB<\/li><li>Database as a Service<\/li><li>Amazon Dynamo<\/li><li>Spring Data Dynamo DB<\/li><li>App Engine Big Table<\/li><\/ul><\/li><li>Module 3: Automating Packaging Deployment<ul><li>Deploying to Infrastructure as a Service<\/li><li>Deploying to Amazon EC2<\/li><li>Packaging Web Applications into WAR files<\/li><li>Adapting Spring Boot Applications for Google App Engine<\/li><li>Deploying to App Engine<\/li><\/ul><\/li><li>Module 4: Performance Testing<ul><li>Intro to Cloud Service Performance Testing<\/li><li>Apache JMeter<\/li><li>Building Realistic Tests<\/li><\/ul><\/li><\/ul><p><b>Section 5: Patterns and Frameworks for Concurrent and Networked Server Software [Optional Material]<\/b><\/p><ul><li>Module 1: Introduction to the Web Server Case Study<ul><li>Applying Patterns and Frameworks to Concurrent and Networked Software<\/li><li>Overview of JAWS Web Server Case Study: Part 1<\/li><li>Overview of JAWS Web Server Case Study: Part 2<\/li><li>Overview of JAWS Web Server Case Study: Part 3<\/li><\/ul><\/li><li>Module 2: Patterns and Frameworks for Service Access and Communication<ul><li>Accidental Complexities with the Sockets API<\/li><li>The Wrapper Facade Pattern<\/li><li>ACE C++ Socket Wrapper Facades<\/li><li>Applying the ACE Wrapper Facades to a Web Client and Server<\/li><\/ul><\/li><li>Module 3: Patterns and Frameworks for Synchronous Event Handling, Connections, and Service Initialization<ul><li>The Reactor and Acceptor-Connector Patterns<\/li><li>The ACE Reactor Framework<\/li><li>Applying the ACE Reactor to JAWS<\/li><li>The ACE Acceptor-Connector Framework and Applying it to JAWS<\/li><\/ul><\/li><li>Module 4: Patterns and Frameworks for Service Configuration and Activiation<ul><li>The Component Configurator Pattern<\/li><li>The ACE Service Configurator Framework<\/li><li>Applying the ACE Service Configurator to JAWS<\/li><li>Applying the Activator Pattern to JAWS<\/li><\/ul><\/li><li>Module 5: Patterns and Frameworks for Concurrency and Synchronization<ul><li>The Active Object Pattern<\/li><li>The ACE Task Framework<\/li><li>Applying ACE Task and Acceptor-Connector to JAWS<\/li><li>The Half-Sync\/Half-Async Pattern<\/li><li>Implementing Half-Sync\/Half-Async Using ACE<\/li><li>The Monitor Object Pattern<\/li><li>Applying the Monitor Object and Synchronization Patterns to JAWS<\/li><li>The Leader\/Followers Pattern<\/li><li>Applying the Leader\/Followers Pattern and ACE_TP_Reactor to JAWS<\/li><\/ul><\/li><li>Module 6: Patterns and Frameworks for Asynchronous Event Handling<ul><li>The Proactor pattern<\/li><li>The ACE Proactor Framework<\/li><li>Applying the ACE Proactor Framework to JAWS<\/li><li>The Asynchronous Completion Token Pattern and Applying it to JAWS<\/li><\/ul><\/li><li>Module 7: Summary<ul><li>Evaluating Patterns and Frameworks for Concurrent and Networked Software<\/li><\/ul><\/li><\/ul>","courseFormat":"The class will consist of lecture videos with integrated quiz&nbsp;questions designed to ensure you understand the material covered in the videos. Students in this track will also complete auto-\/peer-graded programming assignments. The programming assignments will involve writing cloud services using popular software frameworks written in Java, such as&nbsp;<a href=\"http:\/\/projects.spring.io\/spring-framework\/\" target=\"_blank\">Spring Framework<\/a>.&nbsp;","suggestedReadings":"Although the lectures are designed to be largely self-contained, it's recommended (but not required) that students refer to the following books:<br><ul><li>Martin Fowler,&nbsp;<a href=\"http:\/\/www.amazon.com\/Refactoring-Improving-Design-Existing-Code\/dp\/0201485672\" target=\"_blank\">Refactoring: Improving the Design of Existing Code<\/a>, Addison-Wesley Professional, 1999.<\/li><li>Goetz et al.,&nbsp;<a href=\"http:\/\/www.amazon.com\/Java-Concurrency-Practice-Brian-Goetz\/dp\/0321349601\" target=\"_blank\">Java Concurrency in Practice<\/a>, Addison-Wesley, 2006.<\/li><li>Doug Lea,&nbsp;<i><a href=\"http:\/\/www.amazon.com\/Concurrent-Programming-Java-Principles-Pattern\/dp\/0201310090\">Concurrent Programming in Java<\/a><\/i>, Prentice Hall, 1999.<\/li><li>Gamma et at.,&nbsp;<i><a href=\"http:\/\/chggtrx.com\/click.track?CID=267582&amp;AFID=301076&amp;ADID=1088031&amp;SID=posa&amp;isbn_ean=9780201633610\">Design Patterns: Elements of Reusable Object-Oriented&nbsp;<\/a><\/i><i><a href=\"http:\/\/chggtrx.com\/click.track?CID=267582&amp;AFID=301076&amp;ADID=1088031&amp;SID=posa&amp;isbn_ean=9780201633610\">Software<\/a><\/i>, Addison-Wesley, Reading, MA, 1995..<\/li><li>Schmidt et al.,&nbsp;<i><a href=\"http:\/\/chggtrx.com\/click.track?CID=267582&amp;AFID=301076&amp;ADID=1088031&amp;SID=posa&amp;isbn_ean=9780471606956\">Pattern-Oriented Software Architecture, Vol 2: Patterns for&nbsp;<\/a><\/i><i><a href=\"http:\/\/chggtrx.com\/click.track?CID=267582&amp;AFID=301076&amp;ADID=1088031&amp;SID=posa&amp;isbn_ean=9780471606956\">Concurrent and Networked Objects<\/a><\/i>, Wiley and Sons, 2000.<\/li><li>Buschmann et al.,&nbsp;<i><a href=\"http:\/\/www.amazon.com\/Pattern-Oriented-Software-Architecture-Volume-Distributed\/dp\/0470059028\/ref=pd_sim_b_1\">Pattern-Oriented Software Architecture:, Vol 4: A Pattern Language for Distributed Computing<\/a><\/i>, Wiley and Sons, 2007.<\/li><li>Buschmann et al.,&nbsp;<i><a href=\"http:\/\/www.amazon.com\/Pattern-Oriented-Software-Architecture-Languages\/dp\/0471486485\">Pattern-Oriented Software Architecture, Vol 5&nbsp;On Patterns and Pattern Langauges<\/a><\/i>, Wiley and Sons, 2007.<\/li><\/ul><div>Much of this material is available&nbsp;<a href=\"http:\/\/www.dre.vanderbilt.edu\/~schmidt\/tutorials.html\">online<\/a>.<\/div>","estimatedClassWorkload":"8-12 hours\/week","recommendedBackground":"<p dir=\"ltr\">Ideally, students who take this course will be familiar with general object-oriented design and programming concepts (such as encapsulation, abstraction, polymorphism, extensibility ), fundamental Java object-oriented programming language features (such as classes, inheritance, interfaces, and generics available in Java, basic systems programming concepts (such as event handling, processes\/threads, synchronization), and networking terminology (such as client\/server and peer-to-peer architectures). &nbsp;<\/p><div><br><\/div>","links":{}}