{
    "id": 2820,
    "shortName": "ads1",
    "name": "Algorithms for DNA Sequencing",
    "language": "en",
    "shortDescription": "We will learn computational methods -- algorithms and data structures -- for analyzing DNA sequencing data. We will learn a little about DNA, genomics, and how DNA sequencing is used.  We will use Python to implement key algorithms and data structures and to analyze real genomes and DNA sequencing datasets.\n",
    "aboutTheCourse": "DNA sequencing is now a ubiquitous tool in life science. You can observe this trend&nbsp;<a href=\"http:\/\/www.newyorker.com\/magazine\/2014\/07\/21\/one-of-a-kind-2\">just<\/a>&nbsp;<a href=\"http:\/\/www.nytimes.com\/2014\/10\/23\/science\/research-humans-interbred-with-neanderthals.html\">by<\/a>&nbsp;<a href=\"http:\/\/www.nytimes.com\/2013\/06\/27\/science\/studying-tumors-differently-in-hopes-of-outsmarting-them.html\">reading<\/a>&nbsp;<a href=\"http:\/\/www.economist.com\/node\/21560523\">the<\/a>&nbsp;<a href=\"http:\/\/phenomena.nationalgeographic.com\/2013\/02\/06\/you-have-46-chromsomes-this-pond-creature-has-15600\/\">news<\/a>. This course examines the computational problems that come with this onslaught of DNA sequencing data. How do we take a huge collection of DNA \"puzzle pieces\" and assemble them into a genome? How do we make it quick and easy to find a DNA \"needle\" in an enormous genomic \"haystack\"? We will spend the bulk of the course understanding the algorithms and data structures that underlie software tools for analyzing sequencing data. The course is also an opporunity to practice programming skills and gain exposure to basic algorithms and data structures.&nbsp;<strong>This course has a $99 value but being offered at a significant discount.<br><br><\/strong>\n<p>Creation of this course was supported by the Department of Computer Science at JHU and by National Science Foundation Grant IIS-1349906.",
    "targetAudience": 0,
    "courseSyllabus": "<ul><li>Sequencing<ul><li>Introduction to DNA sequencing<\/li><li>Second-generation sequencing and parsing sequencing reads<\/li><\/ul><\/li><li>Computational problems<ul><li>Read alignment<\/li><li>De novo assembly<\/li><\/ul><\/li><li>Exact matching<ul><li>Strings<\/li><li>Exact matching problem and naive algorithm<\/li><li>Boyer-Moore<\/li><\/ul><\/li><li>Preprocessing<ul><li>Online versus offline algorithms<\/li><li>Indexing<\/li><li>Multimaps, binary search, hash tables<\/li><\/ul><\/li><li>Approximate matching<ul><li>Pigeonhole principle<\/li><li>Hamming and edit distance<\/li><li>Global and local alignment<\/li><\/ul><\/li><li>De novo assembly<ul><li>Overlaps<\/li><li>Shortest common superstring and greedy algorithm<\/li><li>De Bruijn graphs<\/li><li>How practical assemblers work<br><\/li><\/ul><\/li><\/ul>",
    "estimatedClassWorkload": "4-6 hours\/week",
    "recommendedBackground": "You should be comfortable programming in Python, or be willing and able to learn as you go. Some undergraduate-level computer science background is helpful but not necessary. No background in biology or genomics is necessary.<br>",
    "links": {

    }
}