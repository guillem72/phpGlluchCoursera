{
    "id": 948,
    "shortName": "webapplications",
    "name": "Web Application Architectures",
    "language": "en",
    "shortDescription": "Learn how to build and deploy modern web application architectures – applications that run over the Internet, in the \"cloud,\" using a browser as the user interface.",
    "aboutTheCourse": "<b>This course explores the development of web application architectures from an engineering perspective.<\/b>&nbsp; We will consider the fundamental design patterns and philosophies associated with modern web application architectures, along with their major components. &nbsp;By the end of this course, I expect you to be able to:<br><ul><li><b><\/b><b><\/b><b><\/b><b><\/b><b>Design, develop and deploy a modern web application. <\/b>&nbsp;This course is <i>not<\/i> about how to build a pretty web page, it's about how to build and deploy the full stack of protocols and technologies associated with a complete web app. &nbsp;That said, it is not possible for you to become an expert in this area in a few weeks. My goal, rather, is to put you on the right path by providing a solid foundation and framework for understanding web applications, allowing you to dig deeper and learn more on your own. The next bullet points describe how we're going to do this.<\/li><li><b>Understand the major architectural components in web apps, and how they fit together.<\/b> &nbsp;Modern web apps are complex. &nbsp;A typical application has a database along with numerous scripts on one end of the web stack, a web server in the middle that delivers information over the Internet, and a user's browser on the other end of the web stack. &nbsp;Even getting started in trying to understand these components can be overwhelming. Consider just the programming languages involved in a typical web stack: from the database (SQL), to the web server (scripting language), to the browser (JavaScript, HTML, CSS), we're dealing with five different programming languages, not to mention the protocols they're operating over\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n–&nbsp;and you need to know a little about them too! We'll introduce a number of software design patterns throughout the course that are aimed at helping you to manage this complexity.<\/li><li><b>Use Ruby on Rails.<\/b> &nbsp;We're going to learn about web apps through the Ruby on Rails framework.&nbsp;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRails is a framework for creating web\napplications that is built on top of the Ruby programming language.&nbsp;I believe this is one of the best frameworks\nfor learning about web applications, and it's also proving highly successful as\na platform for commercial offerings.&nbsp;\nThat said, there are many other frameworks available, and the concepts\nyou will learn using Rails are transferable to these other frameworks.<\/li><li>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<b>Better understand modern software engineering\npractice.&nbsp; <\/b>We’ll be using the latest tools and practices in\nsoftware development, source code control, testing, and application\ndeployment.&nbsp;This will include exposure\nto agile development practices, the numerous tools that software engineers are expected to know how to use, and the cloud-based resources that are\nbecoming increasingly important in web applications.&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;<\/li><\/ul>",
    "targetAudience": 1,
    "courseSyllabus": "<b>&nbsp;Week One&nbsp;–&nbsp;Module 1: Introduction and Background&nbsp;<\/b><br>&nbsp; Lecture 1: Historical Perspective<br>&nbsp; Lecture 2: What is a Web Application?<br>&nbsp; Lecture 3: Web 1.0, 2.0, 3.0 Application Architectures<br>&nbsp; Lecture 4: Design Patterns<br>&nbsp; Lecture 5: Setting up Your Development Environment<br><b>Week Two&nbsp;–&nbsp;Module 2: Ruby on Rails<\/b><br>&nbsp;&nbsp;Lecture 1:&nbsp;Rails Overview<br>&nbsp; Lecture 2: Your First Rails App<br>&nbsp; Lecture 3: The Blog App&nbsp;– Iteration 1<br>&nbsp; Lecture 4: Rails Philosophy<br>&nbsp; Lecture 5: Version Control<br>&nbsp; Lecture 6: Git and Rails<br><b>Week Three&nbsp;–&nbsp;Module 3: Database Interactions<\/b><br>&nbsp;&nbsp;Lecture 1:&nbsp;Relational Databases<br>&nbsp; Lecture 2: Databases in Rails<br>&nbsp; Lecture 3: The Active Record Design Pattern<br>&nbsp; Lecture 4:&nbsp;The Blog App&nbsp;– Iteration 2 (Associations)<br>&nbsp; Lecture 5:&nbsp;The Blog App&nbsp;– Iteration 3 (Validations)<br><b>Week Four&nbsp;–&nbsp;Module 4: The Ruby Programming Language<\/b><br>&nbsp; Lecture 1: Ruby Background<br>&nbsp; Lecture 2: Classes and Inheritance<br>&nbsp; Lecture 3: Objects and Variables<br>&nbsp; Lecture 4:&nbsp;Strings, Regular Expressions and Symbols<br>&nbsp; Lecture 5:&nbsp;Expressions and Control Structures<br>&nbsp; Lecture 6: Collections, Blocks and Iterators<br><b>Week Five –&nbsp;Module 5: Middleware<\/b><br>&nbsp; Lecture 1: What is Middleware?<br>&nbsp; Lecture 2: The Hypertext Transfer Protocol (HTTP)&nbsp;–&nbsp;Introduction<div>&nbsp; Lecture 3: HTTP – Request<\/div>&nbsp; Lecture 4:&nbsp;HTTP&nbsp;–&nbsp;Response<br>&nbsp; Lecture 5:&nbsp;The Model-View-Controller (MVC) Design Pattern<br>&nbsp; Lecture 6:&nbsp;Rails Controllers&nbsp;–&nbsp;Request Handling<br>&nbsp; Lecture 7:&nbsp;Rails Controllers&nbsp;–&nbsp;Response<br>&nbsp; Lecture 8:&nbsp;MVC Implementation in Rails<br>&nbsp; Lecture 9:&nbsp;The Blog App&nbsp;–&nbsp;Iteration 4<br><b>Week Six –&nbsp;Module 6: Presentation\/User Interface<br><\/b>&nbsp; Lecture 1: Introduction and Background<br>&nbsp; Lecture 2: HTML&nbsp;–&nbsp;Basic Syntax<div>&nbsp; Lecture 3: HTML – Document Structure<\/div><div>&nbsp; Lecture 4:&nbsp;HTML – Forms<\/div><div>&nbsp; Lecture 5: Dynamic Content<\/div><div>&nbsp; Lecture 6: Cascading Style Sheets (CSS)<\/div><div>&nbsp; Lecture 7: JavaScript and jQuery<\/div><div>&nbsp; Lecture 8: Ajax<\/div>&nbsp; Lecture 9:&nbsp;The Blog App&nbsp;–&nbsp;Iteration 5<br>",
    "estimatedClassWorkload": "6-9 hours\/week",
    "recommendedBackground": "This is a rigorous course that will involve a\nsignificant amount of programming and additional reading on your own in order\nto get the most out of the class.  I\nexpect you to be proficient in some object-oriented programming language, e.g.\nC++, C#, Python, Java, or Ruby.   Don’t worry if\nyou don’t know Ruby or Ruby on Rails at the moment, we’ll teach it to you as a part of\nthe course.",
    "links": {

    }
}