{
    "id": 987,
    "shortName": "reactive",
    "name": "Principles of Reactive Programming",
    "language": "en",
    "shortDescription": "Learn how to write composable software that stays responsive at all times by being elastic under load and resilient in the presence of failures. Model systems after human organizations or inter-human communication.",
    "aboutTheCourse": "<p>This is a follow-on for the Coursera class “Principles of Functional Programming in Scala”, which so far had more than 100’000 inscriptions over two iterations of the course, with some of the highest completion rates of any massive open online course worldwide.<\/p><p>The aim of the second course is to teach the principles of reactive programming. Reactive programming is an emerging discipline which combines concurrency and event-based and asynchronous systems. It is essential for writing any kind of web-service or distributed system and is also at the core of many high-performance concurrent systems. Reactive programming can be seen as a natural extension of higher-order functional programming to concurrent systems that deal with distributed state&nbsp;by coordinating and orchestrating asynchronous data streams exchanged by actors.<\/p><p>In this course you will discover key elements for writing reactive programs in a composable way. You will find out how to apply these building blocks in the construction of message-driven systems that are scalable and resilient.<\/p>The course is hands on; most units introduce short programs that serve as illustrations of important concepts and invite you to play with them, modifying and improving them. The course is complemented by a series of assignments, which are also programming projects.<br>",
    "targetAudience": 1,
    "courseSyllabus": "<p><b>Week 1<\/b>: Review of Principles of Functional Programming: substitution model, for-expressions and how they relate to monads. Introduces a new implementation of for-expressions: random value generators. Shows how this can be used in randomized testing and gives an overview of ScalaCheck, a tool which implements this idea.<\/p><p><b>Week 2<\/b>: Functional programming and mutable state. What makes an object mutable? How this impacts the substitution model. Extended example: Digital circuit simulation.<\/p><p><b>Week 3<\/b>: Futures. Introduces futures as another monad, with for-expressions as concrete syntax. Shows how futures can be composed to avoid thread blocking. Discusses cross-thread error handling.<\/p><p><b>Week 4<\/b>: Reactive stream processing.  Generalizing futures to reactive computations over streams. Stream operators.<\/p><p><b>Week 5<\/b>: Actors. Introduces the Actor Model, actors as encapsulated units of consistency, asynchronous message passing, discusses different message delivery semantics (at most once, at least once, exactly once) and eventual consistency.<\/p><p><b>Week 6<\/b>: Supervision. Introduces reification of failure, hierarchical failure handling, the Error Kernel pattern, lifecycle monitoring, discusses transient and persistent state.<\/p><b>Week 7<\/b>: Conversation Patterns. Discusses the management of conversational state between actors and patterns for flow control, routing of messages to pools of actors for resilience or load balancing, acknowledgement of reception to achieve reliable delivery.",
    "estimatedClassWorkload": "5-7 hours\/week",
    "recommendedBackground": "You should have a background equivalent to someone who completed the course “Principles of Functional Programming”. We assume you know the fundamentals of functional programming and the Scala language.",
    "links": {

    }
}